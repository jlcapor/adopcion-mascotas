// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    password      String?
    emailVerified DateTime?
    image         String?
    role          USER_ROLE @default(ADOPTER)
    active        Boolean   @default(true)
    accounts      Account[]
    sessions      Session[]
    shelter       Shelter[]
    
    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model City {
    id       Int       @id @default(autoincrement())
    name     String
    regionId Int       @map("region_id")
    Region   Region?   @relation(fields: [regionId], references: [id])
    Shelter  Shelter[]

    @@map("cities")
}

model Region {
    id        Int       @id @default(autoincrement())
    name      String
    cities    City[]
    countryId Int?
    Country   Country?  @relation(fields: [countryId], references: [id])
    Shelter   Shelter[]

    @@map("regions")
}

model Country {
    id      Int      @id @default(autoincrement())
    name    String
    isoCode String   @unique
    regions Region[]

    @@map("countries")
}

model Shelter {
    id           String   @id @default(cuid())
    name         String   
    address      String
    telephone    String
    regionId     Int?     @map("region_id")
    region       Region?  @relation(fields: [regionId], references: [id])
    cityId       Int?     @map("country_id")
    city         City?    @relation(fields: [cityId], references: [id])
    description  String?
    image        String?  @map("image") @db.Text
    userId       String   
    user         User     @relation(fields: [userId], references: [id])
    active       Boolean  @default(false)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    Pet          Pet[]

    @@map("shelters")
}

model Pet {
    id          String   @id @default(cuid())
    name        String
    petTypeId   String
    breedId     String?
    age         Int
    sex         SEX_PET
    color       String
    sizeId      String?
    image       String
    description String   @db.Text
    shelterId   String
    shelter     Shelter  @relation(fields: [shelterId], references: [id])
    petType     PetType  @relation(fields: [petTypeId], references: [id])
    breed       Breed?   @relation(fields: [breedId], references: [id])
    Size        Size?    @relation(fields: [sizeId], references: [id])
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@map("pets")
}

model PetType {
    id        String   @id @default(cuid())
    name      String
    Breed     Breed[]
    Pets      Pet[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("petTypes")
}

model Breed {
    id        String   @id @default(cuid())
    name      String
    petTypeId String
    petType   PetType  @relation(fields: [petTypeId], references: [id])
    Pets      Pet[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("breeds")
}

model Size {
    id        String   @id @default(cuid())
    name      String   @unique
    pets      Pet[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("sizes")
}

enum USER_ROLE {
    ADMIN
    ADOPTER
    SHELTER
}

enum SEX_PET {
    MALE
    FEMALE
}
