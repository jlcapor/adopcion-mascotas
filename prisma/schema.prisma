// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
    @@index([userId])
    @@map(name: "accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@map(name: "sessions")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    password      String?
    emailVerified DateTime?
    image         String?
    role          USER_ROLE @default(USER)
    active        Boolean   @default(true)
    accounts      Account[]
    sessions      Session[]
    orders        Order[] // Renamed from 'Order' to 'orders' for consistency

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map(name: "verification_tokens")
}

model City {
    id         Int       @id @default(autoincrement())
    name       String
    provinceId Int       @map("province_id")
    province   Province? @relation(fields: [provinceId], references: [id])

    @@map("cities")
}

model Province {
    id        Int      @id @default(autoincrement())
    name      String
    cities    City[]
    countryId Int
    country   Country? @relation(fields: [countryId], references: [id])

    @@map("regions")
}

model Country {
    id        Int        @id @default(autoincrement())
    name      String
    isoCode   String     @unique
    provinces Province[]

    @@map("countries")
}

model Pet {
    id          String    @id @default(cuid())
    name        String
    petTypeId   Int
    breedId     Int?
    sex         SEX_PET
    color       String
    sizeId      Int
    birthDate   DateTime?
    images      Image[]
    description String
    petType     PetType   @relation(fields: [petTypeId], references: [id])
    breed       Breed?    @relation(fields: [breedId], references: [id])
    size        Size?     @relation(fields: [sizeId], references: [id])
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@map("pets")
}

model PetType {
    id                   Int                  @id @default(autoincrement())
    name                 String
    slug                 String               @unique
    imageUrl             String?
    breeds               Breed[]
    pets                 Pet[]
    createdAt            DateTime             @default(now())
    updatedAt            DateTime             @updatedAt
    petTypeCategories    CategoryPetType[]
    products             Product[]
    petTypeSubcategories PetTypeSubcategory[]

    @@map("petTypes")
}

model Breed {
    id        Int      @id @default(autoincrement())
    name      String
    petTypeId Int
    petType   PetType  @relation(fields: [petTypeId], references: [id])
    pets      Pet[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("breeds")
}

model Size {
    id        Int      @id @default(autoincrement())
    name      String   @unique
    pets      Pet[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("sizes")
}

model Category {
    id               Int               @id @default(autoincrement())
    name             String
    slug             String            @unique
    imageUrl         String?
    subCategories    SubCategory[]
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
    products         Product[]
    categoryPetTypes CategoryPetType[]

    @@map("categories")
}

model CategoryPetType {
    id         Int      @id @default(autoincrement())
    categoryId Int
    petTypeId  Int
    imageUrl   String?
    category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    petType    PetType  @relation(fields: [petTypeId], references: [id], onDelete: Cascade)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([categoryId, petTypeId])
    @@index([categoryId])
    @@index([petTypeId])
    @@map("category_pet_types")
}

model SubCategory {
    id                   Int                  @id @default(autoincrement())
    name                 String
    slug                 String               @unique
    imageUrl             String?
    categoryId           Int
    category             Category             @relation(fields: [categoryId], references: [id])
    createdAt            DateTime             @default(now())
    updatedAt            DateTime             @updatedAt
    products             Product[]
    petTypeSubcategories PetTypeSubcategory[]

    @@map("subCategories")
}

model PetTypeSubcategory {
    id            Int         @id @default(autoincrement())
    petTypeId     Int
    subCategoryId Int
    imageUrl      String?
    petType       PetType     @relation(fields: [petTypeId], references: [id])
    subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])

    @@unique([petTypeId, subCategoryId])
    @@index([petTypeId])
    @@index([subCategoryId])
    @@map("pet_type_subcategories")
}

model Product {
    id            String         @id @default(cuid())
    name          String
    price         Float
    description   String         @db.Text
    rating        Float?         @default(0)
    stock         Int            @default(1)
    status        PRODUCT_STATUS @default(DISPONIBLE)
    categoryId    Int
    subCategoryId Int?
    petTypeId     Int?
    category      Category       @relation(fields: [categoryId], references: [id])
    subCategory   SubCategory?   @relation(fields: [subCategoryId], references: [id])
    petType       PetType?       @relation(fields: [petTypeId], references: [id])
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    orderItems    OrderItem[]
    images        Image[]

    @@index([name])
    @@map("products")
}

model Image {
    id        String  @id @default(cuid())
    url       String
    name      String
    productId String
    product   Product @relation(fields: [productId], references: [id])
    Pet       Pet?    @relation(fields: [petId], references: [id])
    petId     String?

    @@map("images")
}

model Order {
    id       String       @id @default(cuid())
    userId   String
    user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    total    Float
    items    OrderItem[]
    archived Boolean
    status   ORDER_STATUS @default(PENDING)

    @@index([userId])
    @@map("orders")
}

model OrderItem {
    id        String   @id @default(cuid())
    order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
    orderId   String
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String
    quantity  Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    archived  Boolean  @default(false)

    @@index([orderId])
    @@index([productId])
    @@map("orderItems")
}

//<a href="https://iconscout.com/icons/dog" class="text-underline font-size-sm" target="_blank">Dog</a> by <a href="https://iconscout.com/contributors/flat-icons" class="text-underline font-size-sm" target="_blank">Flat-icons.com</a>
enum USER_ROLE {
    ADMIN
    USER
}

enum SEX_PET {
    MALE
    FEMALE
}

enum ORDER_STATUS {
    PENDING
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELED
}

enum PRODUCT_STATUS {
    DISPONIBLE
    AGOTADO
    DESCONTINUADO
}
