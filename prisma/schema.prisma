// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
    @@index([userId])
    @@map(name: "accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@map(name: "sessions")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    password      String?
    emailVerified DateTime?
    image         String?
    role          USER_ROLE @default(USER)
    active        Boolean   @default(true)
    accounts      Account[]
    sessions      Session[]
    orders        Order[]   // Renamed from 'Order' to 'orders' for consistency

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map(name: "verification_tokens")
}

model Pet {
    id          String   @id @default(cuid())
    name        String
    petTypeId   String
    breedId     String?
    age         Int
    sex         SEX_PET
    color       String
    sizeId      String?
    image       String
    description String   @db.Text
    petType     PetType  @relation(fields: [petTypeId], references: [id])
    breed       Breed?   @relation(fields: [breedId], references: [id])
    size        Size?    @relation(fields: [sizeId], references: [id])
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@map("pets")
}

model PetType {
    id         String            @id @default(cuid())
    name       String
    slug       String            @unique
    breeds     Breed[]
    pets       Pet[]
    createdAt  DateTime          @default(now())
    updatedAt  DateTime          @updatedAt
    categories PetTypeCategory[] // Updated to 'categories' for clarity

    @@map("petTypes")
}

model Breed {
    id        String   @id @default(cuid())
    name      String
    petTypeId String
    petType   PetType  @relation(fields: [petTypeId], references: [id])
    pets      Pet[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("breeds")
}

model Size {
    id        String   @id @default(cuid())
    name      String   @unique
    pets      Pet[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("sizes")
}

model Category {
    id            String            @id @default(cuid())
    name          String
    slug          String            @unique
    subCategories SubCategory[]
    createdAt     DateTime          @default(now())
    updatedAt     DateTime          @updatedAt
    products      Product[]         // Renamed to 'products' for consistency
    petTypes      PetTypeCategory[] // Updated to 'petTypes' for clarity
}

model SubCategory {
    id         String    @id @default(cuid())
    name       String
    slug       String    @unique
    categoryId String
    category   Category  @relation(fields: [categoryId], references: [id])
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    products   Product[] // Renamed to 'products' for consistency
}

model Product {
    id            String       @id @default(cuid())
    name          String
    price         Float
    description   String       @db.Text
    image         String
    rating        Float        @default(0)
    quantity      Int          @default(1)
    categoryId    String
    subCategoryId String?
    category      Category     @relation(fields: [categoryId], references: [id])
    subCategory   SubCategory? @relation(fields: [subCategoryId], references: [id])
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    orderItems    OrderItem[]  // Renamed to 'orderItems' for consistency
}

model PetTypeCategory {
    petTypeId  String
    categoryId String
    petType    PetType  @relation(fields: [petTypeId], references: [id])
    category   Category @relation(fields: [categoryId], references: [id])
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@id([petTypeId, categoryId])
}

model Order {
    id       String       @id @default(cuid())
    userId   String
    user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    total    Float
    items    OrderItem[] // Renamed to 'items' for consistency
    archived Boolean
    status   ORDER_STATUS @default(PENDING)

    @@index([userId])
}

model OrderItem {
    id        String   @id @default(cuid())
    order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
    orderId   String
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String
    quantity  Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    archived  Boolean  @default(false)

    @@index([orderId])
    @@index([productId])
}

enum USER_ROLE {
    ADMIN
    USER
}

enum SEX_PET {
    MALE
    FEMALE
}

enum ORDER_STATUS {
    PENDING
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELED
}
